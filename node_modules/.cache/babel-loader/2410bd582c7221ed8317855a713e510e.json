{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractSubUiSchema;\n\nvar _util = require(\"./util\");\n\nvar restoreField = function restoreField(field, uiSchema, origUiSchema, schema) {\n  var separatorIndex = field.indexOf(\".\");\n\n  if (separatorIndex === -1) {\n    uiSchema[field] = origUiSchema[field];\n  } else {\n    var parentField = field.substr(0, separatorIndex);\n    var childField = field.substr(separatorIndex + 1);\n    var parentFieldSchema = schema.properties[parentField];\n\n    if (uiSchema[parentField][\"ui:widget\"] === \"hidden\") {\n      delete uiSchema[parentField][\"ui:widget\"];\n      delete uiSchema[parentField][\"ui:field\"];\n      uiSchema[parentField] = (0, _util.toHiddenUiSchema)(parentFieldSchema, origUiSchema[parentField]);\n    }\n\n    restoreField(childField, uiSchema[parentField], origUiSchema[parentField], parentFieldSchema);\n  }\n};\n\nfunction restoreFields(fields, uiSchema, origUiSchema, schema) {\n  fields.forEach(function (field) {\n    return restoreField(field, uiSchema, origUiSchema, schema);\n  });\n  return uiSchema;\n}\n\nfunction replaceAliases(aliases, uiSchema, origUiSchema) {\n  Object.keys(aliases).forEach(function (field) {\n    var alias = aliases[field];\n    uiSchema[field] = origUiSchema[alias];\n  });\n}\n\nfunction extractSubUiSchema(fields, aliases, origUiSchema) {\n  var uiSchema = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var schema = arguments[4];\n  restoreFields(fields, uiSchema, origUiSchema, schema);\n  replaceAliases(aliases, uiSchema, origUiSchema);\n  return uiSchema;\n}","map":null,"metadata":{},"sourceType":"script"}