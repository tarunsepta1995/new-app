{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findRelTree = findRelTree;\nexports.orderFields = orderFields;\nexports.extractTree = extractTree;\n\nvar _utils = require(\"../utils\");\n\nfunction findRelTree(tree, navs) {\n  return navs.reduce(function (pos, nav) {\n    if (pos[nav] === undefined) {\n      pos[nav] = {};\n    }\n\n    return pos[nav];\n  }, tree);\n}\n\nfunction pushField(tree, field, uiAlias) {\n  if (tree[_utils.GENERIC_NAV] === undefined) {\n    tree[_utils.GENERIC_NAV] = {\n      fields: [],\n      aliases: {}\n    };\n  }\n\n  tree[_utils.GENERIC_NAV].fields.push(field);\n\n  if (uiAlias) {\n    tree[_utils.GENERIC_NAV].aliases[field] = uiAlias;\n  }\n}\n\nfunction fillSchemaConf(tree, schema, uiSchema) {\n  var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  Object.keys(schema.properties).forEach(function (field) {\n    var fieldSchema = schema.properties[field];\n    var fieldUiSchema = uiSchema[field];\n\n    if (fieldSchema.type === \"object\" && fieldUiSchema) {\n      fillSchemaConf(tree, fieldSchema, fieldUiSchema, field + \".\");\n    } else {\n      var navs = (0, _utils.findFieldNavs)(field, uiSchema);\n      var subTree = findRelTree(tree, navs);\n      pushField(subTree, prefix ? prefix + field : field);\n    }\n  }, {});\n}\n\nfunction fillAliasesConf(tree, uiSchema) {\n  var aliases = (0, _utils.getNavAliases)(uiSchema);\n  Object.keys(aliases).forEach(function (field) {\n    var fieldAlias = (0, _utils.toArray)(aliases[field]);\n    fieldAlias.forEach(function (alias) {\n      var navs = (0, _utils.findFieldNavs)(alias, uiSchema);\n      var subTree = findRelTree(tree, navs);\n      pushField(subTree, field, alias);\n    });\n  });\n}\n\nfunction orderFields(tree, fieldsOrder) {\n  Object.keys(tree).forEach(function (nav) {\n    if (nav === _utils.GENERIC_NAV) {\n      var fields = tree[nav].fields;\n      fields.sort(function (a, b) {\n        return fieldsOrder.indexOf(a) - fieldsOrder.indexOf(b);\n      });\n    } else {\n      orderFields(tree[nav], fieldsOrder);\n    }\n  });\n}\n\nfunction extractTree(schema, uiSchema) {\n  var tree = {};\n  fillSchemaConf(tree, schema, uiSchema);\n  fillAliasesConf(tree, uiSchema); // Calculate field order, either with UI_ORDER or with natural order\n\n  var fieldsOrder = uiSchema[_utils.UI_ORDER] ? uiSchema[_utils.UI_ORDER] : Object.keys(schema.properties);\n  orderFields(tree, fieldsOrder);\n  return tree;\n}","map":null,"metadata":{},"sourceType":"script"}