{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFieldComponent = getFieldComponent;\nexports.Label = Label;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar COMPONENT_TYPES = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\"\n};\n\nfunction getFieldComponent(schema, uiSchema, fields) {\n  var field = uiSchema[\"ui:field\"];\n\n  if (typeof field === \"function\") {\n    return field;\n  }\n\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  var componentName = COMPONENT_TYPES[schema.type];\n  return componentName in fields ? fields[componentName] : function () {\n    return _react2.default.createElement(\"h1\", null, \"Unknown field type \", schema.type);\n  };\n}\n\nvar REQUIRED_FIELD_SYMBOL = \"*\";\n\nfunction DefaultLabel(props) {\n  var label = props.label,\n      required = props.required,\n      id = props.id;\n\n  if (!label) {\n    // See #312: Ensure compatibility with old versions of React.\n    return _react2.default.createElement(\"div\", null);\n  }\n\n  return _react2.default.createElement(\"label\", {\n    className: \"control-label\",\n    htmlFor: id\n  }, required ? label + REQUIRED_FIELD_SYMBOL : label);\n}\n\nfunction Label(_ref) {\n  var _ref$schema = _ref.schema,\n      type = _ref$schema.type,\n      title = _ref$schema.title,\n      uiSchema = _ref.uiSchema,\n      name = _ref.name,\n      required = _ref.required,\n      idSchema = _ref.idSchema;\n  var label = uiSchema[\"ui:title\"] || title || name;\n  var _uiSchema$uiOptions = uiSchema[\"ui:options\"];\n  _uiSchema$uiOptions = _uiSchema$uiOptions === undefined ? {} : _uiSchema$uiOptions;\n  var _uiSchema$uiOptions$l = _uiSchema$uiOptions.label,\n      displayLabel = _uiSchema$uiOptions$l === undefined ? true : _uiSchema$uiOptions$l;\n\n  if (type === \"object\") {\n    displayLabel = false;\n  }\n\n  if (type === \"boolean\" && !uiSchema[\"ui:widget\"]) {\n    displayLabel = false;\n  }\n\n  if (displayLabel) {\n    return _react2.default.createElement(DefaultLabel, {\n      label: label,\n      required: required,\n      id: idSchema[\"$id\"]\n    });\n  } else {\n    return null;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}