{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\");\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends6 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends7 = _interopRequireDefault(_extends6);\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.toErrorList = toErrorList;\nexports.default = validateFormData;\n\nvar _lodash = require(\"lodash.topath\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _ajv = require(\"ajv\");\n\nvar _ajv2 = _interopRequireDefault(_ajv);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ajv = new _ajv2.default({\n  errorDataPath: \"property\",\n  allErrors: true,\n  multipleOfPrecision: 8\n}); // add custom formats\n\najv.addFormat(\"data-url\", /^data:([a-z]+\\/[a-z0-9-+.]+)?;name=(.*);base64,(.*)$/);\najv.addFormat(\"color\", /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/);\n\nfunction toErrorSchema(errors) {\n  // Transforms a ajv validation errors list:\n  // [\n  //   {property: \".level1.level2[2].level3\", message: \"err a\"},\n  //   {property: \".level1.level2[2].level3\", message: \"err b\"},\n  //   {property: \".level1.level2[4].level3\", message: \"err b\"},\n  // ]\n  // Into an error tree:\n  // {\n  //   level1: {\n  //     level2: {\n  //       2: {level3: {errors: [\"err a\", \"err b\"]}},\n  //       4: {level3: {errors: [\"err b\"]}},\n  //     }\n  //   }\n  // };\n  if (!errors.length) {\n    return {};\n  }\n\n  return errors.reduce(function (errorSchema, error) {\n    var property = error.property,\n        message = error.message;\n    var path = (0, _lodash2.default)(property);\n    var parent = errorSchema; // If the property is at the root (.level1) then toPath creates\n    // an empty array element at the first index. Remove it.\n\n    if (path.length > 0 && path[0] === \"\") {\n      path.splice(0, 1);\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = (0, _getIterator3.default)(path.slice(0)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var segment = _step.value;\n\n        if (!(segment in parent)) {\n          parent[segment] = {};\n        }\n\n        parent = parent[segment];\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (Array.isArray(parent.__errors)) {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // \"errors\" (see `validate.createErrorHandler`).\n      parent.__errors = parent.__errors.concat(message);\n    } else {\n      parent.__errors = [message];\n    }\n\n    return errorSchema;\n  }, {});\n}\n\nfunction toErrorList(errorSchema) {\n  var fieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"root\"; // XXX: We should transform fieldName as a full field path string.\n\n  var errorList = [];\n\n  if (\"__errors\" in errorSchema) {\n    errorList = errorList.concat(errorSchema.__errors.map(function (stack) {\n      return {\n        stack: fieldName + \": \" + stack\n      };\n    }));\n  }\n\n  return (0, _keys2.default)(errorSchema).reduce(function (acc, key) {\n    if (key !== \"__errors\") {\n      acc = acc.concat(toErrorList(errorSchema[key], key));\n    }\n\n    return acc;\n  }, errorList);\n}\n\nfunction createErrorHandler(formData) {\n  var handler = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // \"errors\" (see `utils.toErrorSchema`).\n    __errors: [],\n    addError: function addError(message) {\n      this.__errors.push(message);\n    }\n  };\n\n  if ((0, _utils.isObject)(formData)) {\n    return (0, _keys2.default)(formData).reduce(function (acc, key) {\n      return (0, _extends7.default)({}, acc, (0, _defineProperty3.default)({}, key, createErrorHandler(formData[key])));\n    }, handler);\n  }\n\n  if (Array.isArray(formData)) {\n    return formData.reduce(function (acc, value, key) {\n      return (0, _extends7.default)({}, acc, (0, _defineProperty3.default)({}, key, createErrorHandler(value)));\n    }, handler);\n  }\n\n  return handler;\n}\n\nfunction unwrapErrorHandler(errorHandler) {\n  return (0, _keys2.default)(errorHandler).reduce(function (acc, key) {\n    if (key === \"addError\") {\n      return acc;\n    } else if (key === \"__errors\") {\n      return (0, _extends7.default)({}, acc, (0, _defineProperty3.default)({}, key, errorHandler[key]));\n    }\n\n    return (0, _extends7.default)({}, acc, (0, _defineProperty3.default)({}, key, unwrapErrorHandler(errorHandler[key])));\n  }, {});\n}\n/**\n * Transforming the error output from ajv to format used by jsonschema.\n * At some point, components should be updated to support ajv.\n */\n\n\nfunction transformAjvErrors() {\n  var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if (errors === null) {\n    return [];\n  }\n\n  return errors.map(function (e) {\n    var dataPath = e.dataPath,\n        keyword = e.keyword,\n        message = e.message,\n        params = e.params;\n    var property = \"\" + dataPath; // put data in expected format\n\n    return {\n      name: keyword,\n      property: property,\n      message: message,\n      params: params,\n      // specific to ajv\n      stack: (property + \" \" + message).trim()\n    };\n  });\n}\n/**\n * This function processes the formData with a user `validate` contributed\n * function, which receives the form data and an `errorHandler` object that\n * will be used to add custom validation errors for each field.\n */\n\n\nfunction validateFormData(formData, schema, customValidate, transformErrors) {\n  try {\n    ajv.validate(schema, formData);\n  } catch (e) {// swallow errors thrown in ajv due to invalid schemas, these\n    // still get displayed\n  }\n\n  var errors = transformAjvErrors(ajv.errors);\n\n  if (typeof transformErrors === \"function\") {\n    errors = transformErrors(errors);\n  }\n\n  var errorSchema = toErrorSchema(errors);\n\n  if (typeof customValidate !== \"function\") {\n    return {\n      errors: errors,\n      errorSchema: errorSchema\n    };\n  }\n\n  var errorHandler = customValidate(formData, createErrorHandler(formData));\n  var userErrorSchema = unwrapErrorHandler(errorHandler);\n  var newErrorSchema = (0, _utils.mergeObjects)(errorSchema, userErrorSchema, true); // XXX: The errors list produced is not fully compliant with the format\n  // exposed by the jsonschema lib, which contains full field paths and other\n  // properties.\n\n  var newErrors = toErrorList(newErrorSchema);\n  return {\n    errors: newErrors,\n    errorSchema: newErrorSchema\n  };\n}","map":null,"metadata":{},"sourceType":"script"}