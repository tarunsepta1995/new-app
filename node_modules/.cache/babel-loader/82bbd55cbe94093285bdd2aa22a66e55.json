{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _ErrorList = require(\"./ErrorList\");\n\nvar _ErrorList2 = _interopRequireDefault(_ErrorList);\n\nvar _utils = require(\"../utils\");\n\nvar _validate = require(\"../validate\");\n\nvar _validate2 = _interopRequireDefault(_validate);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Form = function (_Component) {\n  (0, _inherits3.default)(Form, _Component);\n\n  function Form(props) {\n    (0, _classCallCheck3.default)(this, Form);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Form.__proto__ || (0, _getPrototypeOf2.default)(Form)).call(this, props));\n\n    _this.onChange = function (formData, newErrorSchema) {\n      var mustValidate = !_this.props.noValidate && _this.props.liveValidate;\n      var state = {\n        formData: formData\n      };\n\n      if (mustValidate) {\n        var _this$validate = _this.validate(formData),\n            errors = _this$validate.errors,\n            errorSchema = _this$validate.errorSchema;\n\n        state = (0, _extends3.default)({}, state, {\n          errors: errors,\n          errorSchema: errorSchema\n        });\n      } else if (!_this.props.noValidate && newErrorSchema) {\n        state = (0, _extends3.default)({}, state, {\n          errorSchema: newErrorSchema,\n          errors: (0, _validate.toErrorList)(newErrorSchema)\n        });\n      }\n\n      (0, _utils.setState)(_this, state, function () {\n        if (_this.props.onChange) {\n          _this.props.onChange(_this.state);\n        }\n      });\n    };\n\n    _this.onBlur = function () {\n      if (_this.props.onBlur) {\n        var _this$props;\n\n        (_this$props = _this.props).onBlur.apply(_this$props, arguments);\n      }\n    };\n\n    _this.onFocus = function () {\n      if (_this.props.onFocus) {\n        var _this$props2;\n\n        (_this$props2 = _this.props).onFocus.apply(_this$props2, arguments);\n      }\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n\n      if (!_this.props.noValidate) {\n        var _this$validate2 = _this.validate(_this.state.formData),\n            errors = _this$validate2.errors,\n            errorSchema = _this$validate2.errorSchema;\n\n        if ((0, _keys2.default)(errors).length > 0) {\n          (0, _utils.setState)(_this, {\n            errors: errors,\n            errorSchema: errorSchema\n          }, function () {\n            if (_this.props.onError) {\n              _this.props.onError(errors);\n            } else {\n              console.error(\"Form validation failed\", errors);\n            }\n          });\n          return;\n        }\n      }\n\n      _this.setState({\n        errors: [],\n        errorSchema: {}\n      }, function () {\n        if (_this.props.onSubmit) {\n          _this.props.onSubmit((0, _extends3.default)({}, _this.state, {\n            status: \"submitted\"\n          }));\n        }\n      });\n    };\n\n    _this.state = _this.getStateFromProps(props);\n\n    if (_this.props.onChange && !(0, _utils.deepEquals)(_this.state.formData, _this.props.formData)) {\n      _this.props.onChange(_this.state);\n    }\n\n    _this.formElement = null;\n    return _this;\n  }\n\n  (0, _createClass3.default)(Form, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var nextState = this.getStateFromProps(nextProps);\n      this.setState(nextState);\n\n      if (!(0, _utils.deepEquals)(nextState.formData, nextProps.formData) && this.props.onChange) {\n        this.props.onChange(nextState);\n      }\n    }\n  }, {\n    key: \"getStateFromProps\",\n    value: function getStateFromProps(props) {\n      var state = this.state || {};\n      var schema = \"schema\" in props ? props.schema : this.props.schema;\n      var uiSchema = \"uiSchema\" in props ? props.uiSchema : this.props.uiSchema;\n      var edit = typeof props.formData !== \"undefined\";\n      var liveValidate = props.liveValidate || this.props.liveValidate;\n      var mustValidate = edit && !props.noValidate && liveValidate;\n      var definitions = schema.definitions;\n      var formData = (0, _utils.getDefaultFormState)(schema, props.formData, definitions);\n      var retrievedSchema = (0, _utils.retrieveSchema)(schema, definitions, formData);\n\n      var _ref = mustValidate ? this.validate(formData, schema) : {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {}\n      },\n          errors = _ref.errors,\n          errorSchema = _ref.errorSchema;\n\n      var idSchema = (0, _utils.toIdSchema)(retrievedSchema, uiSchema[\"ui:rootFieldId\"], definitions, formData, props.idPrefix);\n      return {\n        schema: schema,\n        uiSchema: uiSchema,\n        idSchema: idSchema,\n        formData: formData,\n        edit: edit,\n        errors: errors,\n        errorSchema: errorSchema\n      };\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return (0, _utils.shouldRender)(this, nextProps, nextState);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(formData) {\n      var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.schema;\n      var _props = this.props,\n          validate = _props.validate,\n          transformErrors = _props.transformErrors;\n\n      var _getRegistry = this.getRegistry(),\n          definitions = _getRegistry.definitions;\n\n      var resolvedSchema = (0, _utils.retrieveSchema)(schema, definitions, formData);\n      return (0, _validate2.default)(formData, resolvedSchema, validate, transformErrors);\n    }\n  }, {\n    key: \"renderErrors\",\n    value: function renderErrors() {\n      var _state = this.state,\n          errors = _state.errors,\n          errorSchema = _state.errorSchema,\n          schema = _state.schema,\n          uiSchema = _state.uiSchema;\n      var _props2 = this.props,\n          ErrorList = _props2.ErrorList,\n          showErrorList = _props2.showErrorList,\n          formContext = _props2.formContext;\n\n      if (errors.length && showErrorList != false) {\n        return _react2.default.createElement(ErrorList, {\n          errors: errors,\n          errorSchema: errorSchema,\n          schema: schema,\n          uiSchema: uiSchema,\n          formContext: formContext\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getRegistry\",\n    value: function getRegistry() {\n      // For BC, accept passed SchemaField and TitleField props and pass them to\n      // the \"fields\" registry one.\n      var _getDefaultRegistry = (0, _utils.getDefaultRegistry)(),\n          fields = _getDefaultRegistry.fields,\n          widgets = _getDefaultRegistry.widgets;\n\n      return {\n        fields: (0, _extends3.default)({}, fields, this.props.fields),\n        widgets: (0, _extends3.default)({}, widgets, this.props.widgets),\n        ArrayFieldTemplate: this.props.ArrayFieldTemplate,\n        ObjectFieldTemplate: this.props.ObjectFieldTemplate,\n        FieldTemplate: this.props.FieldTemplate,\n        definitions: this.props.schema.definitions || {},\n        formContext: this.props.formContext || {}\n      };\n    }\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      if (this.formElement) {\n        this.formElement.dispatchEvent(new Event(\"submit\", {\n          cancelable: true\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          children = _props3.children,\n          safeRenderCompletion = _props3.safeRenderCompletion,\n          id = _props3.id,\n          idPrefix = _props3.idPrefix,\n          className = _props3.className,\n          name = _props3.name,\n          method = _props3.method,\n          target = _props3.target,\n          action = _props3.action,\n          autocomplete = _props3.autocomplete,\n          enctype = _props3.enctype,\n          acceptcharset = _props3.acceptcharset,\n          noHtml5Validate = _props3.noHtml5Validate,\n          disabled = _props3.disabled;\n      var _state2 = this.state,\n          schema = _state2.schema,\n          uiSchema = _state2.uiSchema,\n          formData = _state2.formData,\n          errorSchema = _state2.errorSchema,\n          idSchema = _state2.idSchema;\n      var registry = this.getRegistry();\n      var _SchemaField = registry.fields.SchemaField;\n      return _react2.default.createElement(\"form\", {\n        className: className ? className : \"rjsf\",\n        id: id,\n        name: name,\n        method: method,\n        target: target,\n        action: action,\n        autoComplete: autocomplete,\n        encType: enctype,\n        acceptCharset: acceptcharset,\n        noValidate: noHtml5Validate,\n        onSubmit: this.onSubmit,\n        ref: function ref(form) {\n          _this2.formElement = form;\n        }\n      }, this.renderErrors(), _react2.default.createElement(_SchemaField, {\n        schema: schema,\n        uiSchema: uiSchema,\n        errorSchema: errorSchema,\n        idSchema: idSchema,\n        idPrefix: idPrefix,\n        formData: formData,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        registry: registry,\n        safeRenderCompletion: safeRenderCompletion,\n        disabled: disabled\n      }), children ? children : _react2.default.createElement(\"p\", null, _react2.default.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-info\"\n      }, \"Submit\")));\n    }\n  }]);\n  return Form;\n}(_react.Component);\n\nForm.defaultProps = {\n  uiSchema: {},\n  noValidate: false,\n  liveValidate: false,\n  disabled: false,\n  safeRenderCompletion: false,\n  noHtml5Validate: false,\n  ErrorList: _ErrorList2.default\n};\nexports.default = Form;\n\nif (process.env.NODE_ENV !== \"production\") {\n  Form.propTypes = {\n    schema: _propTypes2.default.object.isRequired,\n    uiSchema: _propTypes2.default.object,\n    formData: _propTypes2.default.any,\n    widgets: _propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object])),\n    fields: _propTypes2.default.objectOf(_propTypes2.default.func),\n    ArrayFieldTemplate: _propTypes2.default.func,\n    ObjectFieldTemplate: _propTypes2.default.func,\n    FieldTemplate: _propTypes2.default.func,\n    ErrorList: _propTypes2.default.func,\n    onChange: _propTypes2.default.func,\n    onError: _propTypes2.default.func,\n    showErrorList: _propTypes2.default.bool,\n    onSubmit: _propTypes2.default.func,\n    id: _propTypes2.default.string,\n    className: _propTypes2.default.string,\n    name: _propTypes2.default.string,\n    method: _propTypes2.default.string,\n    target: _propTypes2.default.string,\n    action: _propTypes2.default.string,\n    autocomplete: _propTypes2.default.string,\n    enctype: _propTypes2.default.string,\n    acceptcharset: _propTypes2.default.string,\n    noValidate: _propTypes2.default.bool,\n    noHtml5Validate: _propTypes2.default.bool,\n    liveValidate: _propTypes2.default.bool,\n    validate: _propTypes2.default.func,\n    transformErrors: _propTypes2.default.func,\n    safeRenderCompletion: _propTypes2.default.bool,\n    formContext: _propTypes2.default.object\n  };\n}","map":null,"metadata":{},"sourceType":"script"}