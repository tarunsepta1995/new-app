{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.findFieldNavs = findFieldNavs;\nexports.getNavAliases = getNavAliases;\nexports.isDevelopment = isDevelopment;\nexports.toArray = toArray;\nexports.isEmptySchema = isEmptySchema;\nexports.deepEquals = deepEquals;\nvar GENERIC_NAV = exports.GENERIC_NAV = \"default\";\nvar UI_ORDER = exports.UI_ORDER = \"ui:order\";\nvar UI_NAV_ID = exports.UI_NAV_ID = \"nav\";\n\nfunction findFieldNavs(field, uiSchema) {\n  var navs = uiSchema[field] && uiSchema[field][UI_NAV_ID] ? uiSchema[field][UI_NAV_ID] : [];\n  return toArray(navs);\n}\n\nfunction getNavAliases(_ref) {\n  var _ref$navConf = _ref.navConf;\n  _ref$navConf = _ref$navConf === undefined ? {} : _ref$navConf;\n  var _ref$navConf$aliases = _ref$navConf.aliases,\n      aliases = _ref$navConf$aliases === undefined ? {} : _ref$navConf$aliases;\n  return aliases;\n}\n\nfunction isDevelopment() {\n  return process.env.NODE_ENV !== \"production\";\n}\n\nvar toError = exports.toError = function toError(message) {\n  if (isDevelopment()) {\n    throw new ReferenceError(message);\n  } else {\n    console.error(message);\n  }\n};\n\nfunction toArray(val) {\n  if (Array.isArray(val)) {\n    return val;\n  } else {\n    return [val];\n  }\n}\n\nfunction isEmptySchema(schema) {\n  return !schema || !schema.properties || Object.keys(schema.properties).length === 0;\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) === \"[object Arguments]\";\n}\n\nfunction deepEquals(a, b) {\n  var ca = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // Partially extracted from node-deeper and adapted to exclude comparison\n  // checks for functions.\n  // https://github.com/othiym23/node-deeper\n\n  if (a === b) {\n    return true;\n  } else if (typeof a === \"function\" || typeof b === \"function\") {\n    // Assume all functions are equivalent\n    // see https://github.com/mozilla-services/react-jsonschema-form/issues/255\n    return true;\n  } else if ((typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) !== \"object\" || (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) !== \"object\") {\n    return false;\n  } else if (a === null || b === null) {\n    return false;\n  } else if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  } else if (a instanceof RegExp && b instanceof RegExp) {\n    return a.source === b.source && a.global === b.global && a.multiline === b.multiline && a.lastIndex === b.lastIndex && a.ignoreCase === b.ignoreCase;\n  } else if (isArguments(a) || isArguments(b)) {\n    if (!(isArguments(a) && isArguments(b))) {\n      return false;\n    }\n\n    var slice = Array.prototype.slice;\n    return deepEquals(slice.call(a), slice.call(b), ca, cb);\n  } else {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    var ka = Object.keys(a);\n    var kb = Object.keys(b); // don't bother with stack acrobatics if there's nothing there\n\n    if (ka.length === 0 && kb.length === 0) {\n      return true;\n    }\n\n    if (ka.length !== kb.length) {\n      return false;\n    }\n\n    var cal = ca.length;\n\n    while (cal--) {\n      if (ca[cal] === a) {\n        return cb[cal] === b;\n      }\n    }\n\n    ca.push(a);\n    cb.push(b);\n    ka.sort();\n    kb.sort();\n\n    for (var j = ka.length - 1; j >= 0; j--) {\n      if (ka[j] !== kb[j]) {\n        return false;\n      }\n    }\n\n    var key = void 0;\n\n    for (var k = ka.length - 1; k >= 0; k--) {\n      key = ka[k];\n\n      if (!deepEquals(a[key], b[key], ca, cb)) {\n        return false;\n      }\n    }\n\n    ca.pop();\n    cb.pop();\n    return true;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}