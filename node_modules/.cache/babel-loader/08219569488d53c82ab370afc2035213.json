{"ast":null,"code":"var babylon = require('babylon');\n\nvar traverse = require('babel-traverse').default;\n\nvar types = require('babel-types');\n\nvar addChild = function addChild(parent, child) {\n  var parentNode = parent.__node;\n\n  if (!parentNode.props) {\n    parentNode.props = {};\n  }\n\n  if (!parentNode.props.children) {\n    parentNode.props.children = [];\n  }\n\n  parentNode.props.children.push(child);\n};\n\nvar getParentType = function getParentType(node) {\n  if (types.isJSXIdentifier(node)) {\n    return node.name;\n  }\n\n  if (types.isJSXMemberExpression(node)) {\n    return getParentType(node.object) + '.' + node.property.name;\n  }\n};\n\nvar parse = function parse(code) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var allowPlainText = options.plainText !== false;\n  var isAllowed = options.only && options.only.length ? function (name) {\n    return options.only.includes(name);\n  } : function () {\n    return true;\n  };\n  var ast = babylon.parse(code, {\n    plugins: ['jsx', 'flow']\n  });\n  var tree;\n  var level = 0;\n  traverse(ast, {\n    JSXElement: {\n      enter: function enter() {\n        level++;\n      },\n      exit: function exit() {\n        level--;\n      }\n    },\n    JSXOpeningElement: {\n      enter: function enter(path) {\n        var name = path.node.name;\n        var node;\n\n        if (types.isJSXIdentifier(name)) {\n          node = {\n            type: name.name\n          };\n        } else if (types.isJSXMemberExpression(name)) {\n          node = {\n            type: name.property.name,\n            parentType: getParentType(name.object)\n          };\n        }\n\n        if (node && isAllowed(node.type)) {\n          path.parent.__node = node;\n\n          if (level === 1) {\n            tree = node;\n          } else {\n            addChild(path.parentPath.parentPath.node, node);\n          }\n        }\n      }\n    },\n    JSXAttribute: function JSXAttribute(path) {\n      var node = path.node;\n      var parent = path.findParent(function (p) {\n        return types.isJSXElement(p.node);\n      });\n      var parentNode = parent.node.__node;\n\n      if (!parentNode.props) {\n        parentNode.props = {};\n      }\n\n      parentNode.props[node.name.name] = node.value ? node.value.value : types.booleanLiteral(true).value;\n    },\n    JSXText: function JSXText(path) {\n      var text = path.node.value.replace(/[\\n]/g, '').trim();\n\n      if (text && allowPlainText) {\n        addChild(path.parent, text);\n      }\n    }\n  });\n  return tree;\n};\n\nmodule.exports = {\n  parse: parse\n};","map":null,"metadata":{},"sourceType":"script"}